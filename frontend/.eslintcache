[{"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\index.js":"1","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\reportWebVitals.js":"2","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\App.js":"3","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\store.js":"4","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\components\\Footer.js":"5","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\components\\Header.js":"6","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\screen\\HomeScreen.js":"7","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\screen\\ShippingScreen.js":"8","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\screen\\ProductScreen.js":"9","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\screen\\LoginScreen.js":"10","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\screen\\RegisterScreen.js":"11","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\screen\\PaymentMethod.js":"12","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\screen\\CartScreen.js":"13","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\screen\\PlaceOrderScreen.js":"14","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\screen\\ProfileScreen.js":"15","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\screen\\OrderScreen.js":"16","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\reducers\\cart.js":"17","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\reducers\\productLists.js":"18","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\reducers\\productDetails.js":"19","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\reducers\\user.js":"20","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\reducers\\order.js":"21","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\components\\ErrMessage.js":"22","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\components\\Loader.js":"23","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\components\\Products.js":"24","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\components\\CheckoutStepper.js":"25","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\components\\CustomStyles\\header.js":"26","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\actions\\productListAction.js":"27","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\actions\\userAction.js":"28","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\actions\\cartAction.js":"29","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\actions\\orderAction.js":"30","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\screen\\customStyle\\PlaceOrderScreen.js":"31","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\screen\\customStyle\\ProfileScreen.js":"32","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\actionTypes\\orderConstants.js":"33","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\actionTypes\\userConstants.js":"34","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\actionTypes\\productListConstants.js":"35","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\actionTypes\\productDetailsConstants.js":"36","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\actionTypes\\cartConstants.js":"37","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\components\\Rating.js":"38","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\components\\CustomStyles\\CheckoutStepper\\StepIcon.js":"39","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\components\\CustomStyles\\CheckoutStepper\\StepConnector.js":"40","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\screen\\customStyle\\allFormsScreen.js":"41","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\actions\\productDetailsAction.js":"42","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\utils\\carousalData.js":"43"},{"size":627,"mtime":1608645620000,"results":"44","hashOfConfig":"45"},{"size":362,"mtime":1606722012000,"results":"46","hashOfConfig":"45"},{"size":1683,"mtime":1612176658155,"results":"47","hashOfConfig":"45"},{"size":1953,"mtime":1612031501122,"results":"48","hashOfConfig":"45"},{"size":506,"mtime":1607670676000,"results":"49","hashOfConfig":"45"},{"size":7471,"mtime":1609181078000,"results":"50","hashOfConfig":"45"},{"size":7144,"mtime":1612191113233,"results":"51","hashOfConfig":"45"},{"size":5823,"mtime":1609181078000,"results":"52","hashOfConfig":"45"},{"size":5638,"mtime":1609088202000,"results":"53","hashOfConfig":"45"},{"size":6000,"mtime":1609181078000,"results":"54","hashOfConfig":"45"},{"size":8102,"mtime":1609181078000,"results":"55","hashOfConfig":"45"},{"size":3527,"mtime":1609268542000,"results":"56","hashOfConfig":"45"},{"size":8795,"mtime":1608906540000,"results":"57","hashOfConfig":"45"},{"size":11311,"mtime":1612031501139,"results":"58","hashOfConfig":"45"},{"size":9939,"mtime":1612031501140,"results":"59","hashOfConfig":"45"},{"size":13010,"mtime":1612031520606,"results":"60","hashOfConfig":"45"},{"size":1324,"mtime":1609181078000,"results":"61","hashOfConfig":"45"},{"size":657,"mtime":1608709918000,"results":"62","hashOfConfig":"45"},{"size":637,"mtime":1608709918000,"results":"63","hashOfConfig":"45"},{"size":3321,"mtime":1612031501121,"results":"64","hashOfConfig":"45"},{"size":2582,"mtime":1612031501120,"results":"65","hashOfConfig":"45"},{"size":255,"mtime":1608906540000,"results":"66","hashOfConfig":"45"},{"size":418,"mtime":1608645620000,"results":"67","hashOfConfig":"45"},{"size":1354,"mtime":1612071816514,"results":"68","hashOfConfig":"45"},{"size":1212,"mtime":1609181078000,"results":"69","hashOfConfig":"45"},{"size":2505,"mtime":1609088320000,"results":"70","hashOfConfig":"45"},{"size":962,"mtime":1608645620000,"results":"71","hashOfConfig":"45"},{"size":5474,"mtime":1612031501119,"results":"72","hashOfConfig":"45"},{"size":1988,"mtime":1609181078000,"results":"73","hashOfConfig":"45"},{"size":4551,"mtime":1612031520569,"results":"74","hashOfConfig":"45"},{"size":1101,"mtime":1612031520607,"results":"75","hashOfConfig":"45"},{"size":2068,"mtime":1612031501142,"results":"76","hashOfConfig":"45"},{"size":893,"mtime":1612031501116,"results":"77","hashOfConfig":"45"},{"size":940,"mtime":1612031501117,"results":"78","hashOfConfig":"45"},{"size":181,"mtime":1608645620000,"results":"79","hashOfConfig":"45"},{"size":199,"mtime":1608645620000,"results":"80","hashOfConfig":"45"},{"size":244,"mtime":1609181078000,"results":"81","hashOfConfig":"45"},{"size":1855,"mtime":1607758504000,"results":"82","hashOfConfig":"45"},{"size":1513,"mtime":1609181078000,"results":"83","hashOfConfig":"45"},{"size":672,"mtime":1609181078000,"results":"84","hashOfConfig":"45"},{"size":2079,"mtime":1609181078000,"results":"85","hashOfConfig":"45"},{"size":1017,"mtime":1608645620000,"results":"86","hashOfConfig":"45"},{"size":950,"mtime":1612190618742,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"18mc93y",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"90"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"90"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"90"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"90"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"90"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"90"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"90"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"90"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"90"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"90"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"90"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"90"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"90"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\index.js",[],["188","189"],"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\reportWebVitals.js",[],"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\App.js",[],"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\store.js",[],"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\components\\Footer.js",[],"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\components\\Header.js",[],"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\screen\\HomeScreen.js",["190","191","192","193","194","195"],"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\screen\\ShippingScreen.js",["196"],"import React, { useEffect, useState } from \"react\";\r\n\r\n/////////////////////////////////////////    MATERIAL UI    ////////////////////////////////\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport { Avatar, Button } from \"@material-ui/core\";\r\n\r\n///////////////////////////////////////      MATERIAL UI ICONS     ///////////////////////////////\r\nimport LocalShippingIcon from \"@material-ui/icons/LocalShipping\";\r\nimport LocationOnIcon from \"@material-ui/icons/LocationOn\";\r\nimport LocationCityIcon from \"@material-ui/icons/LocationCity\";\r\nimport FiberPinIcon from \"@material-ui/icons/FiberPin\";\r\nimport LanguageIcon from \"@material-ui/icons/Language\";\r\n\r\n////////////////////////////////////////     REDUX          /////////////////////////////////////\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { addShippingAddress } from \"../redux/actions/cartAction\";\r\n\r\nimport CheckoutStepper from \"../components/CheckoutStepper\";\r\n\r\n///////////////////////////////////////     CUSTOM STYLE    /////////////////////////////////////\r\nimport { useStyle } from \"./customStyle/allFormsScreen\";\r\n\r\nconst ShippingScreen = ({ history }) => {\r\n  const classes = useStyle();\r\n\r\n  ////////////////////     REDUX  REDUCER   ////////////////////\r\n  const shippingAdd = useSelector((state) => state.cart);\r\n  const { shippingAddress } = shippingAdd;\r\n\r\n  ////////////////////    SHIPPING ADDRESS STATE (DEFAULT: FROM LOCAL STORAGE)    ////////////////////////\r\n  const [address, setAddress] = useState(shippingAddress.address);\r\n  const [city, setCity] = useState(shippingAddress.city);\r\n  const [postalCode, setPostalCode] = useState(shippingAddress.postalCode);\r\n  const [country, setCountry] = useState(shippingAddress.country);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    //DISPATCH SHIPPING ADDRESS\r\n    dispatch(addShippingAddress({ address, city, postalCode, country }));\r\n    history.push(\"/payment\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <CheckoutStepper step={1} />\r\n      <Paper elevation={14} className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LocalShippingIcon />\r\n        </Avatar>\r\n        <Typography className={classes.heading} component=\"h1\" variant=\"h5\">\r\n          Shipping Address\r\n        </Typography>\r\n\r\n        <form className={classes.form}>\r\n          <FormControl variant=\"outlined\" className={classes.input}>\r\n            <InputLabel htmlFor=\"outlined-adornment-address\">\r\n              Address\r\n            </InputLabel>\r\n            <OutlinedInput\r\n              id=\"outlined-adornment-address\"\r\n              placeholder=\"Your Address\"\r\n              required\r\n              type=\"text\"\r\n              value={address}\r\n              onChange={(e) => setAddress(e.target.value)}\r\n              startAdornment={\r\n                <InputAdornment position=\"start\">\r\n                  <LocationOnIcon className={classes.icon} />\r\n                </InputAdornment>\r\n              }\r\n              labelWidth={60}\r\n            />\r\n          </FormControl>\r\n\r\n          <FormControl variant=\"outlined\" className={classes.input}>\r\n            <InputLabel htmlFor=\"outlined-adornment-city\">City</InputLabel>\r\n            <OutlinedInput\r\n              id=\"outlined-adornment-city\"\r\n              placeholder=\"Your City\"\r\n              required\r\n              type=\"text\"\r\n              value={city}\r\n              onChange={(e) => setCity(e.target.value)}\r\n              startAdornment={\r\n                <InputAdornment position=\"start\">\r\n                  <LocationCityIcon className={classes.icon} />\r\n                </InputAdornment>\r\n              }\r\n              labelWidth={30}\r\n            />\r\n          </FormControl>\r\n\r\n          <FormControl variant=\"outlined\" className={classes.input}>\r\n            <InputLabel htmlFor=\"outlined-adornment-postalCode\">\r\n              Postal Code\r\n            </InputLabel>\r\n            <OutlinedInput\r\n              id=\"outlined-adornment-postalCode\"\r\n              placeholder=\"Postal Code\"\r\n              required\r\n              type=\"text\"\r\n              value={postalCode}\r\n              onChange={(e) => setPostalCode(e.target.value)}\r\n              startAdornment={\r\n                <InputAdornment position=\"start\">\r\n                  <FiberPinIcon className={classes.icon} />\r\n                </InputAdornment>\r\n              }\r\n              labelWidth={90}\r\n            />\r\n          </FormControl>\r\n\r\n          <FormControl variant=\"outlined\" className={classes.input}>\r\n            <InputLabel htmlFor=\"outlined-adornment-confirmPassword\">\r\n              Country\r\n            </InputLabel>\r\n            <OutlinedInput\r\n              id=\"outlined-adornment-country\"\r\n              placeholder=\"Your Country\"\r\n              required\r\n              type=\"text\"\r\n              value={country}\r\n              onChange={(e) => setCountry(e.target.value)}\r\n              startAdornment={\r\n                <InputAdornment position=\"start\">\r\n                  <LanguageIcon className={classes.icon} />\r\n                </InputAdornment>\r\n              }\r\n              labelWidth={58}\r\n            />\r\n          </FormControl>\r\n\r\n          <Button\r\n            className={classes.button}\r\n            onClick={submitHandler}\r\n            size=\"large\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            CONTINUE\r\n          </Button>\r\n        </form>\r\n      </Paper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ShippingScreen;\r\n","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\screen\\ProductScreen.js",["197","198","199","200"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Image,\r\n  ListGroup,\r\n  Card,\r\n  Button,\r\n  Form,\r\n} from \"react-bootstrap\";\r\n\r\n//////////////////    SCREEN        //////////////////////////\r\n\r\n//////////////////    COMPONENTS     //////////////////////////\r\nimport Rating from \"../components/Rating\";\r\nimport Loader from \"../components/Loader\";\r\nimport ErrMessage from \"../components/ErrMessage\";\r\n\r\n/////////////////     REDUX    ///////////////////////////////////\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { listProductDetails } from \"../redux/actions/productDetailsAction\";\r\n\r\nimport \"../styles/Screen/ProductScreen.css\";\r\n\r\nexport default function ProductScreen({ history, match }) {\r\n  const [qty, setQty] = useState(1);\r\n\r\n  //////////////////     fetching datas of productList from redux state   ////////////////////////\r\n\r\n  const dispatch = useDispatch();\r\n  const productDetails = useSelector((state) => state.productDetails);\r\n  const { loading, product, error } = productDetails;\r\n\r\n  useEffect(() => {\r\n    dispatch(listProductDetails(match.params.category, match.params.id));\r\n  }, [dispatch]);\r\n\r\n  //////////////////////    Redirect to Cart page      ///////////////////////\r\n\r\n  const addToCartHandler = () => {\r\n    history.push(\r\n      `/cart/${match.params.category}/${match.params.id}?qty=${qty}`\r\n    );\r\n  };\r\n\r\n  /////////////////////    GO BACK      ////////////////////////\r\n  const goBack = () => {\r\n    history.goBack();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item\">\r\n            <a href=\"/\">Home</a>\r\n          </li>\r\n          <li className=\"breadcrumb-item active\">{product.category}</li>\r\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n            {product.name}\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n\r\n      <Button onClick={goBack} className=\"btn btn-light my-3\">\r\n        Go Back\r\n      </Button>\r\n\r\n      {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <ErrMessage varient=\"#FC308B\">{error}</ErrMessage>\r\n      ) : (\r\n        <Row>\r\n          <Col md={6}>\r\n            <Image\r\n              className=\"shadow\"\r\n              src={product.image}\r\n              alt={product.name}\r\n              fluid\r\n            />\r\n          </Col>\r\n\r\n          <Col md={3}>\r\n            <ListGroup className=\"shadow\" varient=\"flush\">\r\n              <ListGroup.Item>\r\n                <h3 className=\"font-weight-bold text-primary\">\r\n                  {product.name}\r\n                </h3>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <strong>\r\n                  <h5 className=\"font-weight-bold text-secondary\">Price:</h5>\r\n                </strong>\r\n                <span>{product.price}</span>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <strong>\r\n                  <h5 className=\"font-weight-bold text-secondary\">\r\n                    Description:\r\n                  </h5>\r\n                </strong>\r\n                <p>{product.description}</p>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Rating\r\n                  value={product.rating}\r\n                  text={`${product.numReviews} reviews`}\r\n                />\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Col>\r\n\r\n          <Col md={3}>\r\n            <Card>\r\n              <ListGroup varient=\"flush\">\r\n                <ListGroup.Item>\r\n                  <Row>\r\n                    <Col>Price: </Col>\r\n                    <Col>\r\n                      <strong>${product.price}</strong>\r\n                    </Col>\r\n                  </Row>\r\n                </ListGroup.Item>\r\n                <ListGroup.Item>\r\n                  <Row>\r\n                    <Col>Status: </Col>\r\n                    <Col>\r\n                      <strong>\r\n                        ${product.countInStock ? \"In Stock\" : \"Out Of Stock\"}\r\n                      </strong>\r\n                    </Col>\r\n                  </Row>\r\n                </ListGroup.Item>\r\n                {product.countInStock > 0 && (\r\n                  <ListGroup.Item>\r\n                    <Row>\r\n                      <Col>Quantity: </Col>\r\n                      <Col>\r\n                        <Form.Control\r\n                          as=\"select\"\r\n                          value={qty}\r\n                          onChange={(e) => setQty(e.target.value)}\r\n                        >\r\n                          {[...Array(product.countInStock).keys()].map((q) => (\r\n                            <option key={q + 1} value={q + 1}>\r\n                              {q + 1}\r\n                            </option>\r\n                          ))}\r\n                        </Form.Control>\r\n                      </Col>\r\n                    </Row>\r\n                  </ListGroup.Item>\r\n                )}\r\n                <ListGroup.Item>\r\n                  <Button\r\n                    className={\r\n                      product.countInStock == 0\r\n                        ? \"btn-block p-3 disabled\"\r\n                        : \"btn-block p-3\"\r\n                    }\r\n                    onClick={addToCartHandler}\r\n                    type=\"button\"\r\n                    disabled={product.countInStock == 0}\r\n                  >\r\n                    ADD TO CART\r\n                  </Button>\r\n                </ListGroup.Item>\r\n              </ListGroup>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\screen\\LoginScreen.js",["201","202"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n/////////////////////////////////////////    MATERIAL UI    ////////////////////////////////\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport { Avatar, Button } from \"@material-ui/core\";\r\n\r\n///////////////////////////////////////      MATERIAL UI ICONS     ///////////////////////////////\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport EmailIcon from \"@material-ui/icons/Email\";\r\nimport PeopleIcon from \"@material-ui/icons/People\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOffIcon from \"@material-ui/icons/VisibilityOff\";\r\nimport LockIcon from \"@material-ui/icons/Lock\";\r\n\r\n////////////////////////////////////////     REDUX          /////////////////////////////////////\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { loginUser } from \"../redux/actions/userAction\";\r\n\r\n///////////////////////////////////////     CUSTOM STYLE    /////////////////////////////////////\r\nimport { useStyle } from \"./customStyle/allFormsScreen\";\r\n\r\nimport CheckoutStepper from \"../components/CheckoutStepper\";\r\nimport Message from \"../components/ErrMessage\";\r\nimport Loader from \"../components/Loader\";\r\n\r\nconst LoginScreen = ({ history, location }) => {\r\n  const classes = useStyle();\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [passwordVisibility, setPasswordVisibility] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n  const login = useSelector((state) => state.userLogin);\r\n  const { loading, error, userInfo } = login;\r\n\r\n  ///////////////////////    FOR SHIPPING PAGE REDIRECT OR HOME   //////////////////\r\n  const redirect = location.search ? location.search.split(\"=\")[1] : \"/\";\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      history.push(redirect);\r\n    }\r\n  }, [userInfo, history, redirect]);\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    //DISPATCH LOGIN\r\n    dispatch(loginUser(email, password));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {redirect == \"shipping\" ? <CheckoutStepper step={0} /> : null}\r\n      <Paper elevation={14} className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <PeopleIcon />\r\n        </Avatar>\r\n        <Typography className={classes.heading} component=\"h1\" variant=\"h5\">\r\n          Sign in\r\n        </Typography>\r\n\r\n        {/*///////////////////////////////    LOADER    /////////////////////////////////////////*/}\r\n        {loading && <Loader />}\r\n\r\n        <form className={classes.form}>\r\n          <FormControl variant=\"outlined\" className={classes.input}>\r\n            <InputLabel htmlFor=\"outlined-adornment-email\">Email</InputLabel>\r\n            <OutlinedInput\r\n              id=\"outlined-adornment-email\"\r\n              placeholder=\"Email Address\"\r\n              required\r\n              type=\"text\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              startAdornment={\r\n                <InputAdornment position=\"start\">\r\n                  <EmailIcon className={classes.icon} />\r\n                </InputAdornment>\r\n              }\r\n              labelWidth={70}\r\n            />\r\n          </FormControl>\r\n\r\n          <FormControl variant=\"outlined\" className={classes.input}>\r\n            <InputLabel htmlFor=\"outlined-adornment-password\">\r\n              Password\r\n            </InputLabel>\r\n            <OutlinedInput\r\n              id=\"outlined-adornment-password\"\r\n              placeholder=\"Password\"\r\n              required\r\n              type={passwordVisibility ? \"text\" : \"password\"}\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              startAdornment={\r\n                <InputAdornment position=\"start\">\r\n                  <LockIcon className={classes.icon} />\r\n                </InputAdornment>\r\n              }\r\n              endAdornment={\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton\r\n                    aria-label=\"toggle password visibility\"\r\n                    onClick={() => setPasswordVisibility(!passwordVisibility)}\r\n                    onMouseDown={(e) => e.preventDefault()}\r\n                    edge=\"end\"\r\n                  >\r\n                    {passwordVisibility ? (\r\n                      <VisibilityIcon />\r\n                    ) : (\r\n                      <VisibilityOffIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              }\r\n              labelWidth={70}\r\n            />\r\n          </FormControl>\r\n\r\n          {/*//////////////////////     VALIDATION ERROR MESSAGE     ////////////////////////*/}\r\n          {error && <Message varient=\"error\">{error}</Message>}\r\n\r\n          <Button\r\n            className={classes.button}\r\n            onClick={submitHandler}\r\n            size=\"large\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            Sign In\r\n          </Button>\r\n\r\n          <Grid container>\r\n            <Grid item>\r\n              <Typography component=\"h5\" className={classes.register}>\r\n                Haven't Registered yet? &nbsp;\r\n                <Link\r\n                  to={redirect ? `/register?redirect=${redirect}` : \"/register\"}\r\n                  variant=\"body2\"\r\n                >\r\n                  Register\r\n                </Link>\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </Paper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginScreen;\r\n","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\screen\\RegisterScreen.js",["203","204","205"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n/////////////////////////////////////////    MATERIAL UI    ////////////////////////////////\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport { Avatar, Button } from \"@material-ui/core\";\r\n\r\n///////////////////////////////////////      MATERIAL UI ICONS     ///////////////////////////////\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport EmailIcon from \"@material-ui/icons/Email\";\r\nimport PeopleIcon from \"@material-ui/icons/People\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOffIcon from \"@material-ui/icons/VisibilityOff\";\r\nimport LockIcon from \"@material-ui/icons/Lock\";\r\n\r\n////////////////////////////////////////     REDUX          /////////////////////////////////////\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { registerUser } from \"../redux/actions/userAction\";\r\n\r\n///////////////////////////////////////     CUSTOM STYLE    /////////////////////////////////////\r\nimport { useStyle } from \"./customStyle/allFormsScreen\";\r\n\r\nimport Message from \"../components/ErrMessage\";\r\nimport Loader from \"../components/Loader\";\r\n\r\nconst RegisterScreen = ({ history, location }) => {\r\n  const classes = useStyle();\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [passwordVisibility, setPasswordVisibility] = useState(false);\r\n  const [confirmPasswordVisibility, setConfirmPasswordVisibility] = useState(\r\n    false\r\n  );\r\n  const [message, setMessage] = useState(null);\r\n\r\n  const dispatch = useDispatch();\r\n  const register = useSelector((state) => state.userRegister);\r\n  const { loading, error, userInfo, isAuthenticated } = register;\r\n\r\n  const redirect = location.search ? location.search.split(\"=\")[1] : \"/\";\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      history.push(redirect);\r\n    }\r\n  }, [userInfo, history, redirect]);\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    //DISPATCH REGISTER\r\n    if (password == confirmPassword) {\r\n      dispatch(registerUser(name, email, password));\r\n    } else {\r\n      setMessage(\"Password does not match\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Paper elevation={14} className={classes.paper}>\r\n      <Avatar className={classes.avatar}>\r\n        <PeopleIcon />\r\n      </Avatar>\r\n      <Typography className={classes.heading} component=\"h1\" variant=\"h5\">\r\n        Sign Up\r\n      </Typography>\r\n\r\n      {/*///////////////////////////////    LOADER    /////////////////////////////////////////*/}\r\n      {loading && <Loader />}\r\n\r\n      <form className={classes.form}>\r\n        <FormControl variant=\"outlined\" className={classes.input}>\r\n          <InputLabel htmlFor=\"outlined-adornment-name\">Name</InputLabel>\r\n          <OutlinedInput\r\n            id=\"outlined-adornment-name\"\r\n            placeholder=\"Your Name\"\r\n            required\r\n            type=\"text\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n            startAdornment={\r\n              <InputAdornment position=\"start\">\r\n                <PeopleIcon className={classes.icon} />\r\n              </InputAdornment>\r\n            }\r\n            labelWidth={45}\r\n          />\r\n        </FormControl>\r\n\r\n        <FormControl variant=\"outlined\" className={classes.input}>\r\n          <InputLabel htmlFor=\"outlined-adornment-email\">Email</InputLabel>\r\n          <OutlinedInput\r\n            id=\"outlined-adornment-email\"\r\n            placeholder=\"Email Address\"\r\n            required\r\n            type=\"text\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            startAdornment={\r\n              <InputAdornment position=\"start\">\r\n                <EmailIcon className={classes.icon} />\r\n              </InputAdornment>\r\n            }\r\n            labelWidth={40}\r\n          />\r\n        </FormControl>\r\n\r\n        <FormControl variant=\"outlined\" className={classes.input}>\r\n          <InputLabel htmlFor=\"outlined-adornment-password\">\r\n            Password\r\n          </InputLabel>\r\n          <OutlinedInput\r\n            id=\"outlined-adornment-password\"\r\n            placeholder=\"Password\"\r\n            required\r\n            type={passwordVisibility ? \"text\" : \"password\"}\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            startAdornment={\r\n              <InputAdornment position=\"start\">\r\n                <LockIcon className={classes.icon} />\r\n              </InputAdornment>\r\n            }\r\n            endAdornment={\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  aria-label=\"toggle password visibility\"\r\n                  onClick={() => setPasswordVisibility(!passwordVisibility)}\r\n                  onMouseDown={(e) => e.preventDefault()}\r\n                  edge=\"end\"\r\n                >\r\n                  {passwordVisibility ? (\r\n                    <VisibilityIcon />\r\n                  ) : (\r\n                    <VisibilityOffIcon />\r\n                  )}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n            labelWidth={70}\r\n          />\r\n        </FormControl>\r\n\r\n        <FormControl variant=\"outlined\" className={classes.input}>\r\n          <InputLabel htmlFor=\"outlined-adornment-confirmPassword\">\r\n            Confirm Password\r\n          </InputLabel>\r\n          <OutlinedInput\r\n            id=\"outlined-adornment-confirmPassword\"\r\n            placeholder=\"Confirm Password\"\r\n            required\r\n            type={confirmPasswordVisibility ? \"text\" : \"password\"}\r\n            value={confirmPassword}\r\n            onChange={(e) => setConfirmPassword(e.target.value)}\r\n            startAdornment={\r\n              <InputAdornment position=\"start\">\r\n                <LockIcon className={classes.icon} />\r\n              </InputAdornment>\r\n            }\r\n            endAdornment={\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  aria-label=\"toggle password visibility\"\r\n                  onClick={() =>\r\n                    setConfirmPasswordVisibility(!confirmPasswordVisibility)\r\n                  }\r\n                  onMouseDown={(e) => e.preventDefault()}\r\n                  edge=\"end\"\r\n                >\r\n                  {confirmPasswordVisibility ? (\r\n                    <VisibilityIcon />\r\n                  ) : (\r\n                    <VisibilityOffIcon />\r\n                  )}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n            labelWidth={135}\r\n          />\r\n        </FormControl>\r\n\r\n        {/*//////////////////////     VALIDATION ERROR MESSAGE     ////////////////////////*/}\r\n\r\n        {error && <Message varient=\"error\">{error}</Message>}\r\n        {message && <Message varient=\"error\">{message}</Message>}\r\n\r\n        <Button\r\n          className={classes.button}\r\n          onClick={submitHandler}\r\n          size=\"large\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          Register\r\n        </Button>\r\n\r\n        <Grid container>\r\n          <Grid item>\r\n            <Typography component=\"h5\" className={classes.login}>\r\n              Already Registered? &nbsp;\r\n              <Link\r\n                to={redirect ? `/login?redirect=${redirect}` : \"/login\"}\r\n                variant=\"body2\"\r\n              >\r\n                Login\r\n              </Link>\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default RegisterScreen;\r\n","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\screen\\PaymentMethod.js",["206"],"import React, { useState } from \"react\";\r\n\r\n/////////////////////////////////////////    MATERIAL UI    ////////////////////////////////\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport { Avatar, Button } from \"@material-ui/core\";\r\nimport AccountBalanceIcon from \"@material-ui/icons/AccountBalance\";\r\n\r\nimport CheckoutStepper from \"../components/CheckoutStepper\";\r\n\r\n////////////////////////////////////////     REDUX          /////////////////////////////////////\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { addPaymentMethod } from \"../redux/actions/cartAction\";\r\n\r\n///////////////////////////////////////     CUSTOM STYLE    /////////////////////////////////////\r\nimport { useStyle } from \"./customStyle/allFormsScreen\";\r\n\r\nconst PaymentMethodScreen = ({ history }) => {\r\n  const classes = useStyle();\r\n\r\n  ////////////////////     REDUX  REDUCER of Shipping Address   ////////////////////\r\n  const shippingAdd = useSelector((state) => state.cart);\r\n  const { shippingAddress } = shippingAdd;\r\n\r\n  if (!shippingAddress) {\r\n    history.push(\"/shipping\");\r\n  }\r\n\r\n  const [paymentMethod, setPaymentMethod] = useState(\"PayPal\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    /////////////////////////      DISPATCH PAYMENT METHOD and push to /placeorder   ////////////////\r\n    dispatch(addPaymentMethod(paymentMethod));\r\n    history.push(\"/placeorder\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <CheckoutStepper step={2} />\r\n      <Paper elevation={14} className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <AccountBalanceIcon />\r\n        </Avatar>\r\n        <Typography className={classes.heading} component=\"h1\" variant=\"h5\">\r\n          Payment Method\r\n        </Typography>\r\n\r\n        <form className={classes.form}>\r\n          <FormControl component=\"fieldset\" className={classes.input}>\r\n            {/* <FormLabel className={classes.selectLabel} component=\"legend\">\r\n              Select Method\r\n            </FormLabel> */}\r\n            <RadioGroup\r\n              aria-label=\"payment method\"\r\n              name=\"payment method\"\r\n              value={paymentMethod}\r\n              onChange={(e) => setPaymentMethod(e.target.value)}\r\n            >\r\n              <FormControlLabel\r\n                value=\"PayPal or Credit Card\"\r\n                control={<Radio required />}\r\n                label=\"PayPal or Credit Card\"\r\n              />\r\n              <FormControlLabel\r\n                value=\"Stripe\"\r\n                control={<Radio required />}\r\n                label=\"Stripe\"\r\n              />\r\n              <FormControlLabel\r\n                value=\"Cash On Delivery\"\r\n                control={<Radio required />}\r\n                label=\"Cash On Delivery\"\r\n              />\r\n            </RadioGroup>\r\n          </FormControl>\r\n\r\n          <Button\r\n            className={classes.button}\r\n            onClick={submitHandler}\r\n            size=\"large\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            CONTINUE\r\n          </Button>\r\n        </form>\r\n      </Paper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PaymentMethodScreen;\r\n","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\screen\\CartScreen.js",["207","208","209","210","211"],"import React, { useEffect } from \"react\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Card,\r\n  ListGroup,\r\n  Image,\r\n  Form,\r\n} from \"react-bootstrap\";\r\n\r\n//////////////////    COMPONENTS     //////////////////////////\r\nimport Rating from \"../components/Rating\";\r\nimport Loader from \"../components/Loader\";\r\nimport ErrMessage from \"../components/ErrMessage\";\r\n\r\n/////////////////     REDUX    ///////////////////////////////////\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addToCart, removeFromCart } from \"../redux/actions/cartAction\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n//////////////////   CSS style   //////////////////////////////\r\n\r\nimport \"../styles/Screen/CartScreen.css\";\r\n\r\nconst CartScreen = ({ match, location, history }) => {\r\n  const productId = match.params.id;\r\n  const category = match.params.category;\r\n  const qty = location.search ? Number(location.search.split(\"=\")[1]) : 1;\r\n\r\n  const dispatch = useDispatch();\r\n  const cart = useSelector((state) => state.cart);\r\n  const { cartItems } = cart;\r\n\r\n  useEffect(() => {\r\n    if (productId) {\r\n      dispatch(addToCart(productId, category, qty));\r\n    }\r\n  }, [dispatch, productId, qty]);\r\n\r\n  ////////////////////      remove cart Handler    /////////////////////////\r\n\r\n  const removecartHandler = (productId) => {\r\n    console.log(productId);\r\n    dispatch(removeFromCart(productId));\r\n  };\r\n\r\n  ////////////////////      Checkout Process Handler    /////////////////////////\r\n\r\n  const checkoutHandler = () => {\r\n    history.push(\"/login?redirect=shipping\");\r\n    console.log(\"CHECKOUT\");\r\n  };\r\n\r\n  ////////////////////     GO BACK      //////////////////////////////////\r\n  const goBack = () => {\r\n    history.goBack();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/*//////////////////////////   BREADCRUMB OF NAV  //////////////////////////*/}\r\n\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item\">\r\n            <a href=\"/\">Home</a>\r\n          </li>\r\n\r\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n            CART\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n\r\n      <Button onClick={goBack} className=\"btn btn-light mt-2\">\r\n        Go Back\r\n      </Button>\r\n      {/*///////////////////////////  CART WHOLE SECTION  /////////////////////////////*/}\r\n\r\n      <Row className=\"mt-4\">\r\n        {/*//////////////////////////   1. CART LEFT SECTION   //////////////////////////////*/}\r\n        <Col md={8}>\r\n          <h1 className=\"cart__name \">\r\n            YOUR CART ({cartItems.length})\r\n            <span className=\"cart__name__span\"> ITEM</span>\r\n          </h1>\r\n\r\n          <br />\r\n\r\n          {/*//////////////    CART == EMPTY -> ErrMess => Else => loop through cartItems   ////////////*/}\r\n\r\n          {cartItems.length == 0 ? (\r\n            <ErrMessage varient=\"info\">\r\n              <span className=\"cart__empty\">Your cart is empty </span>\r\n              <Link to=\"/\">Keep Shopping</Link>\r\n            </ErrMessage>\r\n          ) : (\r\n            <ListGroup varient=\"flush\" className=\"shadow-lg\">\r\n              <ListGroup.Item className=\"cart__left__heading\">\r\n                <Row>\r\n                  <Col sm={3}>\r\n                    <h3>Image</h3>\r\n                  </Col>\r\n                  <Col sm={3}>\r\n                    <h3>Name</h3>\r\n                  </Col>\r\n                  <Col sm={2}>\r\n                    <h3>Price</h3>\r\n                  </Col>\r\n                  <Col sm={2}>\r\n                    <h3>Quantity</h3>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              {cartItems.map((item) => (\r\n                <ListGroup.Item key={item.product}>\r\n                  <Row>\r\n                    <Col sm={3}>\r\n                      <Image\r\n                        className=\"cart__left__item__image\"\r\n                        width=\"200\"\r\n                        src={item.image}\r\n                        alt={item.name}\r\n                        fluid\r\n                        rounded\r\n                      />\r\n                    </Col>\r\n                    <Col sm={3}>\r\n                      <Link\r\n                        className=\"cart__left__item__name\"\r\n                        to={`/products/${item.category}/${item.product}`}\r\n                      >\r\n                        {item.name}\r\n                      </Link>\r\n                    </Col>\r\n                    <Col sm={2} className=\"cart__left__item__price\">\r\n                      ${item.price}\r\n                    </Col>\r\n                    <Col sm={2}>\r\n                      <Form.Control\r\n                        as=\"select\"\r\n                        style={{ border: \"none\", outline: \"none\" }}\r\n                        value={item.qty}\r\n                        onChange={(e) =>\r\n                          dispatch(\r\n                            addToCart(\r\n                              item.product,\r\n                              item.category,\r\n                              Number(e.target.value)\r\n                            )\r\n                          )\r\n                        }\r\n                      >\r\n                        {[...Array(item.countInStock).keys()].map((q) => (\r\n                          <option key={q + 1} value={q + 1}>\r\n                            {q + 1}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Control>\r\n                    </Col>\r\n                    <Col sm={2}>\r\n                      <Button\r\n                        className=\"cart__left__item__remove\"\r\n                        type=\"button\"\r\n                        variant=\"light\"\r\n                        onClick={() => removecartHandler(item.product)}\r\n                      >\r\n                        <i className=\"fas fa-trash\"></i>\r\n                      </Button>\r\n                    </Col>\r\n                  </Row>\r\n                </ListGroup.Item>\r\n              ))}\r\n            </ListGroup>\r\n          )}\r\n        </Col>\r\n\r\n        {/*//////////////////////////   2. CART RIGHT SECTION    /////////////////////////////*/}\r\n        <Col md={4}>\r\n          <Card>\r\n            <ListGroup>\r\n              <ListGroup.Item className=\"pb-4\">\r\n                <Button\r\n                  className=\"btn-block p-2 cart__right__checkout\"\r\n                  disabled={cartItems.length == 0}\r\n                  onClick={checkoutHandler}\r\n                >\r\n                  PROCEED TO PAY\r\n                </Button>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <h4 className=\"cart__right__order__heading\">\r\n                  <strong>ORDER SUMMARY</strong>\r\n                </h4>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>\r\n                    <h4 className=\"cart__right__subtotal\">Subtotal:</h4>\r\n                  </Col>\r\n                  <Col>\r\n                    <h5 className=\"cart__right__subtotal--value\">\r\n                      ({cartItems.reduce((acc, item) => acc + item.qty, 0)})\r\n                    </h5>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>\r\n                    <h4 className=\"cart__right__price\">Price:</h4>\r\n                  </Col>\r\n                  <Col>\r\n                    <h5 className=\"cart__right__price--value\">\r\n                      $\r\n                      {cartItems\r\n                        .reduce((acc, item) => acc + item.qty * item.price, 0)\r\n                        .toFixed(2)}\r\n                    </h5>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>\r\n                    <h4 className=\"cart__right__delivery\">Delivery:</h4>\r\n                  </Col>\r\n                  <Col>\r\n                    <h5 className=\"cart__right__delivery--value\">Free</h5>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>\r\n                    <h4 className=\"cart__right__total__price\">Total:</h4>\r\n                  </Col>\r\n                  <Col>\r\n                    <h5 className=\"cart__right__total__price--value\">\r\n                      $\r\n                      {cartItems\r\n                        .reduce((acc, item) => acc + item.qty * item.price, 0)\r\n                        .toFixed(2)}\r\n                    </h5>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CartScreen;\r\n","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\screen\\PlaceOrderScreen.js",["212","213","214"],"import React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n///////////////////////////     MATERIAL UI   ////////////////////////////////\r\n\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport ErrMess from \"../components/ErrMessage\";\r\n\r\n///////////////////////////    REDUX     ///////////////////////////////\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { removeFromCart } from \"../redux/actions/cartAction\";\r\nimport { createOrder } from \"../redux/actions/orderAction\";\r\n\r\nimport CheckoutStepper from \"../components/CheckoutStepper\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Container } from \"@material-ui/core\";\r\n\r\n///////////////////////////    CUSTOM STYLES     ///////////////////////////////\r\nimport { useStyles } from \"./customStyle/PlaceOrderScreen\";\r\n\r\nconst PlaceOrderScreen = ({ history }) => {\r\n  const classes = useStyles();\r\n\r\n  const dispatch = useDispatch();\r\n  const cart = useSelector((state) => state.cart);\r\n  const { cartItems, shippingAddress, paymentMethod } = cart;\r\n\r\n  /////////////////////  Items Price   ////////////////////\r\n  cart.itemsPrice = cartItems\r\n    .reduce((acc, item) => acc + item.qty * item.price, 0)\r\n    .toFixed(2);\r\n\r\n  ////////////////////   Shipping Price  /////////////////////////////\r\n  cart.shippingPrice = (cart.itemsPrice > 150 ? 100 : 0).toFixed(2);\r\n\r\n  //////////////////////  Tax Price  /////////////////////////////\r\n  cart.taxPrice = ((cart.itemsPrice * 25) / 100).toFixed(2);\r\n\r\n  /////////////////////   TOTAL PRICE  /////////////////////////////\r\n  cart.totalPrice = (\r\n    Number(cart.itemsPrice) +\r\n    Number(cart.shippingPrice) +\r\n    Number(cart.taxPrice)\r\n  ).toFixed(2);\r\n\r\n  /////////////////  REMOVE ORDER FROM CART   //////////////\r\n  const removeCartHandler = (id) => {\r\n    dispatch(removeFromCart(id));\r\n  };\r\n\r\n  const placeOrder = useSelector((state) => state.order);\r\n  const { order, success, error } = placeOrder;\r\n\r\n  //////////////////  PLACE ORDER   //////////////////////\r\n  const placeOrderHandler = () => {\r\n    dispatch(\r\n      createOrder({\r\n        orderItems: cartItems,\r\n        shippingAddress: shippingAddress,\r\n        paymentMethod: paymentMethod,\r\n        itemsPrice: cart.itemsPrice,\r\n        shippingPrice: cart.shippingPrice,\r\n        taxPrice: cart.taxPrice,\r\n        totalPrice: cart.totalPrice,\r\n      })\r\n    );\r\n    console.log(\"order\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (success) {\r\n      history.push(`/orders/${order._id}`);\r\n    }\r\n  }, [history, success]);\r\n\r\n  return (\r\n    <>\r\n      <CheckoutStepper step={3} />\r\n\r\n      <Grid container spacing={4}>\r\n        {/*/////////////////////   LEFT SIDE    ///////////////////////////////////*/}\r\n        <Grid item md={8} xs={12}>\r\n          <Paper className={classes.paper} elevation={6}>\r\n            <List className={classes.list}>\r\n              <ListItem className={classes.list_item}>\r\n                <Typography color=\"primary\" variant=\"h5\" component=\"h3\">\r\n                  <strong>SHIPPING DETAILS</strong>\r\n                </Typography>\r\n              </ListItem>\r\n              <ListItem className={classes.list_item}>\r\n                <Typography color=\"textPrimary\" varient=\"p\" component=\"h6\">\r\n                  {shippingAddress.address},\r\n                  <br />\r\n                  {shippingAddress.city},\r\n                  <br />\r\n                  {shippingAddress.country},\r\n                  <br />\r\n                  {shippingAddress.postalCode}\r\n                </Typography>\r\n              </ListItem>\r\n            </List>\r\n\r\n            <Divider variant=\"fullWidth\" className={classes.divider} />\r\n\r\n            <List className={classes.list}>\r\n              <ListItem className={classes.list_item}>\r\n                <Typography color=\"primary\" variant=\"h5\" component=\"h3\">\r\n                  <strong>PAYMENT METHOD</strong>\r\n                </Typography>\r\n              </ListItem>\r\n              <ListItem className={classes.list_item}>\r\n                <Typography color=\"textPrimary\" varient=\"p\" component=\"h6\">\r\n                  {paymentMethod}\r\n                </Typography>\r\n              </ListItem>\r\n            </List>\r\n          </Paper>\r\n\r\n          <Paper className={classes.paper} elevation={6}>\r\n            <List className={classes.list}>\r\n              <ListItem className={classes.list_item}>\r\n                <Typography color=\"primary\" variant=\"h5\" component=\"h3\">\r\n                  <strong>ORDER DETAILS</strong>\r\n                </Typography>\r\n              </ListItem>\r\n            </List>\r\n\r\n            {!cartItems.length ? (\r\n              <Container maxWidth=\"md\">\r\n                <ErrMess varient=\"info\">\r\n                  Your Cart Is Empty <Link to=\"/\">Keep Shopping</Link>\r\n                </ErrMess>\r\n              </Container>\r\n            ) : (\r\n              <List>\r\n                {cartItems.map((item, index) => (\r\n                  <div key={index}>\r\n                    <ListItem\r\n                      className={classes.list_item}\r\n                      alignItems=\"flex-start\"\r\n                    >\r\n                      <ListItemAvatar>\r\n                        <Avatar\r\n                          className={classes.avatar}\r\n                          alt={item.name}\r\n                          variant=\"square\"\r\n                          src={item.image}\r\n                        />\r\n                      </ListItemAvatar>\r\n                      <Link\r\n                        className={classes.order_link}\r\n                        to={`/products/${item.category}/${item.product}`}\r\n                      >\r\n                        <ListItemText\r\n                          primary={item.name}\r\n                          secondary={\r\n                            <Typography\r\n                              color=\"primary\"\r\n                              variant=\"body2\"\r\n                              component=\"span\"\r\n                            >\r\n                              {item.qty} x {item.price} ={\" \"}\r\n                              {(item.qty * item.price).toFixed(2)}\r\n                            </Typography>\r\n                          }\r\n                        />\r\n                      </Link>\r\n                      <ListItemSecondaryAction>\r\n                        <Button\r\n                          type=\"button\"\r\n                          variant=\"light\"\r\n                          onClick={() => removeCartHandler(item.product)}\r\n                        >\r\n                          <i className=\"fas fa-trash\"></i>\r\n                        </Button>\r\n                      </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                    <Divider\r\n                      variant=\"fullWidth\"\r\n                      className={classes.divider}\r\n                      component=\"li\"\r\n                    />\r\n                  </div>\r\n                ))}\r\n              </List>\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/*/////////////////////   RIGHT SIDE    ///////////////////////////////////*/}\r\n        <Grid item md={4} xs={12}>\r\n          <Paper elevation={6}>\r\n            <List>\r\n              <ListItem>\r\n                <Typography\r\n                  className={classes.order_summary}\r\n                  color=\"primary\"\r\n                  variant=\"h4\"\r\n                  component=\"h3\"\r\n                >\r\n                  <strong>ORDER SUMMARY</strong>\r\n                </Typography>\r\n              </ListItem>\r\n\r\n              <Divider variant=\"inset\" component=\"br\" />\r\n\r\n              <ListItem>\r\n                <Grid container>\r\n                  <Grid item lg={6} xs={6}>\r\n                    <Typography color=\"primary\" varient=\"h6\" component=\"h6\">\r\n                      <strong>Items</strong>\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={6}>\r\n                    <Typography color=\"textPrimary\" varient=\"p\" component=\"h6\">\r\n                      ${cart.itemsPrice}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </ListItem>\r\n\r\n              <Divider\r\n                variant=\"fullWidth\"\r\n                className={classes.divider}\r\n                component=\"li\"\r\n              />\r\n\r\n              <ListItem>\r\n                <Grid container>\r\n                  <Grid item lg={6} xs={6}>\r\n                    <Typography color=\"primary\" varient=\"h6\" component=\"h6\">\r\n                      <strong>Shipping</strong>\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={6}>\r\n                    <Typography color=\"textPrimary\" varient=\"p\" component=\"h6\">\r\n                      ${cart.shippingPrice}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </ListItem>\r\n\r\n              <Divider\r\n                variant=\"fullWidth\"\r\n                className={classes.divider}\r\n                component=\"li\"\r\n              />\r\n\r\n              <ListItem>\r\n                <Grid container>\r\n                  <Grid item lg={6} xs={6}>\r\n                    <Typography color=\"primary\" varient=\"h6\" component=\"h6\">\r\n                      <strong>Tax</strong>\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={6}>\r\n                    <Typography color=\"textPrimary\" varient=\"p\" component=\"h6\">\r\n                      ${cart.taxPrice}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </ListItem>\r\n\r\n              <Divider\r\n                variant=\"fullWidth\"\r\n                className={classes.divider}\r\n                component=\"li\"\r\n              />\r\n\r\n              <ListItem>\r\n                <Grid container>\r\n                  <Grid item lg={6} xs={6}>\r\n                    <Typography color=\"primary\" varient=\"h6\" component=\"h6\">\r\n                      <strong>Total</strong>\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={6}>\r\n                    <Typography color=\"textPrimary\" varient=\"p\" component=\"h6\">\r\n                      ${cart.totalPrice}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </ListItem>\r\n\r\n              <Divider variant=\"fullWidth\" component=\"br\" />\r\n\r\n              <ListItem>\r\n                <Button\r\n                  className=\"btn-block p-2\"\r\n                  disabled={cartItems.length == 0}\r\n                  onClick={placeOrderHandler}\r\n                >\r\n                  PLACE ORDER\r\n                </Button>\r\n              </ListItem>\r\n            </List>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlaceOrderScreen;\r\n","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\screen\\ProfileScreen.js",["215","216"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { Button } from \"react-bootstrap\";\r\n\r\n////////////////////////////////    MATERIAL UI   ////////////////////////////////////\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport MaterialButton from \"@material-ui/core/Button\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\n\r\n/////////////////////////////////    REDUX     //////////////////////////////////////\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getUserDetails, updateUserProfile } from \"../redux/actions/userAction\";\r\nimport { listMyOrders } from \"../redux/actions/orderAction\";\r\n\r\n///////////////////////////////////     CUSTOM STYLE    ///////////////////////////////\r\nimport {\r\n  useStyles,\r\n  CssTextField,\r\n  StyledTableCell,\r\n  StyledTableRow,\r\n} from \"./customStyle/ProfileScreen\";\r\n\r\nimport Message from \"../components/ErrMessage\";\r\nimport Loader from \"../components/Loader\";\r\n\r\nconst ProfileScreen = ({ history }) => {\r\n  const classes = useStyles();\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [message, setMessage] = useState(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  //////////////////////   LOGIN REDUCER    ///////////////////\r\n  const login = useSelector((state) => state.userLogin);\r\n  const { userInfo } = login;\r\n\r\n  //////////////////////    USER PROFILE REDUCER    /////////////////\r\n  const userDetails = useSelector((state) => state.userDetails);\r\n  const { loading, user, error } = userDetails;\r\n\r\n  ///////////////////   UPDATE USER PROFILE REDUCER    ////////////////\r\n  const updateProfile = useSelector((state) => state.userUpdateProfile);\r\n  const { success } = updateProfile;\r\n\r\n  ///////////////////   MY ORDERS REDUCER    ////////////////\r\n  const myOrdersList = useSelector((state) => state.myOrders);\r\n  const { loading: loadingOrders, error: errorOrders, orders } = myOrdersList;\r\n\r\n  useEffect(() => {\r\n    if (!userInfo) {\r\n      history.push(\"/login\");\r\n    } else {\r\n      if (!user) {\r\n        dispatch(getUserDetails(\"profile\"));\r\n        dispatch(listMyOrders());\r\n      } else {\r\n        setName(user.name);\r\n        setEmail(user.email);\r\n      }\r\n    }\r\n  }, [dispatch, userInfo, user]);\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    if (password !== confirmPassword) {\r\n      setMessage(\"Password does not match\");\r\n    } else {\r\n      //DISPATCH UPDATE\r\n      dispatch(updateUserProfile({ id: user._id, name, email, password }));\r\n    }\r\n  };\r\n\r\n  ////////////////////     GO BACK      //////////////////////////////////\r\n  const goBack = () => {\r\n    history.goBack();\r\n  };\r\n  return (\r\n    <>\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item\">\r\n            <a href=\"/\">Home</a>\r\n          </li>\r\n\r\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n            PROFILE\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n\r\n      <Button onClick={goBack} className=\"btn btn-light mt-2 mb-4\">\r\n        Go Back\r\n      </Button>\r\n\r\n      {/*//////////////////////////////////////     GRID       ////////////////////////////////////// */}\r\n\r\n      <Grid container spacing={2}>\r\n        <Grid item sm={4} xs={12}>\r\n          <h2 className={classes.heading}>PROFILE</h2>\r\n          {loading && <Loader />}\r\n          <form className={classes.form}>\r\n            <CssTextField\r\n              id=\"outlined-name\"\r\n              label=\"Name\"\r\n              value={name}\r\n              multiline\r\n              placeholder=\"Name\"\r\n              onChange={(e) => setName(e.target.value)}\r\n              variant=\"outlined\"\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n            />\r\n\r\n            <CssTextField\r\n              id=\"outlined-email\"\r\n              label=\"Email\"\r\n              value={email}\r\n              multiline\r\n              placeholder=\"Email\"\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              variant=\"outlined\"\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n            />\r\n            <CssTextField\r\n              type=\"password\"\r\n              autoComplete=\"current-password\"\r\n              label=\"Password\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              placeholder=\"Password\"\r\n              variant=\"outlined\"\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n            />\r\n            <CssTextField\r\n              type=\"password\"\r\n              autoComplete=\"current-password\"\r\n              id=\"outlined-password\"\r\n              type=\"password\"\r\n              required\r\n              label=\"Confirm Password\"\r\n              value={confirmPassword}\r\n              placeholder=\"Confirm Password\"\r\n              onChange={(e) => setConfirmPassword(e.target.value)}\r\n              variant=\"outlined\"\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n            />\r\n\r\n            {/*//////////////////////     VALIDATION ERROR MESSAGE     ////////////////////////*/}\r\n\r\n            {error && <Message varient=\"error\">{error}</Message>}\r\n            {message && <Message varient=\"error\">{message}</Message>}\r\n\r\n            {success && (\r\n              <Message varient=\"success\">Profile Updated Successfully</Message>\r\n            )}\r\n            <MaterialButton\r\n              className={classes.button}\r\n              onClick={submitHandler}\r\n              size=\"large\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n            >\r\n              Update\r\n            </MaterialButton>\r\n          </form>\r\n        </Grid>\r\n\r\n        <Grid item sm={8} xs={12}>\r\n          <h2 className={classes.heading}>MY ORDERS</h2>\r\n          {loadingOrders ? (\r\n            <Loader />\r\n          ) : errorOrders ? (\r\n            <Message varient=\"danger\">{errorOrders}</Message>\r\n          ) : (\r\n            <Paper elevation={8} className={classes.table}>\r\n              <TableContainer className={classes.table}>\r\n                <Table aria-label=\"customized table\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <StyledTableCell align=\"center\">ORDER ID</StyledTableCell>\r\n                      <StyledTableCell align=\"center\">DATE</StyledTableCell>\r\n                      <StyledTableCell align=\"center\">TOTAL</StyledTableCell>\r\n                      <StyledTableCell align=\"center\">PAID</StyledTableCell>\r\n                      <StyledTableCell align=\"center\">\r\n                        DELIVERED\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align=\"center\"></StyledTableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {orders &&\r\n                      orders.map((order) => (\r\n                        <StyledTableRow key={order._id}>\r\n                          <StyledTableCell component=\"th\" scope=\"row\">\r\n                            {order._id}\r\n                          </StyledTableCell>\r\n                          <StyledTableCell align=\"center\">\r\n                            {order.createdAt.substring(0, 10)}\r\n                          </StyledTableCell>\r\n                          <StyledTableCell align=\"center\">\r\n                            {order.totalPrice}\r\n                          </StyledTableCell>\r\n                          <StyledTableCell align=\"center\">\r\n                            {order.isPaid ? (\r\n                              <div>\r\n                                <DoneIcon color=\"primary\"></DoneIcon>\r\n                                &nbsp; &nbsp;\r\n                                <span>{order.paidAt.substring(0, 10)}</span>\r\n                              </div>\r\n                            ) : (\r\n                              <i\r\n                                className=\"fa fa-times\"\r\n                                style={{ color: \"#f44336\" }}\r\n                              ></i>\r\n                            )}\r\n                          </StyledTableCell>\r\n                          <StyledTableCell align=\"center\">\r\n                            {order.isDelivered ? (\r\n                              order.deliveredAt.substring(0, 10)\r\n                            ) : (\r\n                              <i\r\n                                className=\"fa fa-times\"\r\n                                style={{ color: \"#f44336\" }}\r\n                              ></i>\r\n                            )}\r\n                          </StyledTableCell>\r\n\r\n                          <StyledTableCell align=\"center\">\r\n                            <Link to={`/orders/${order._id}`}>\r\n                              <MaterialButton\r\n                                className={classes.details}\r\n                                variant=\"outlined\"\r\n                                color=\"primary\"\r\n                              >\r\n                                DETAILS\r\n                              </MaterialButton>\r\n                            </Link>\r\n                          </StyledTableCell>\r\n                        </StyledTableRow>\r\n                      ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </Paper>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileScreen;\r\n","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\screen\\OrderScreen.js",["217","218","219","220","221","222"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { PayPalButton } from \"react-paypal-button-v2\";\r\n// import PaypalExpressBtn from \"react-paypal-express-checkout\";\r\n\r\n///////////////////////////     MATERIAL UI   ////////////////////////////////\r\n\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport ErrMess from \"../components/ErrMessage\";\r\nimport Loader from \"../components/Loader\";\r\n\r\n///////////////////////////    REDUX     ///////////////////////////////\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getOrderDetails, payOrder } from \"../redux/actions/orderAction\";\r\nimport { ORDER_PAY_RESET } from \"../redux/actionTypes/orderConstants\";\r\n\r\nimport axios from \"axios\";\r\n\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Container } from \"@material-ui/core\";\r\n\r\n///////////////////////////    CUSTOM STYLES     ///////////////////////////////\r\nimport { useStyles } from \"./customStyle/PlaceOrderScreen\";\r\n\r\nconst OrderScreen = ({ match }) => {\r\n  const classes = useStyles();\r\n  const [sdkReady, setSdkReady] = useState(false);\r\n\r\n  const orderId = match.params.id;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const orderDetails = useSelector((state) => state.orderDetails);\r\n  const { loading, orders, error } = orderDetails;\r\n\r\n  console.log(loading);\r\n\r\n  const orderPay = useSelector((state) => state.orderPay);\r\n  const {\r\n    loading: loadingPay,\r\n    success: successPay,\r\n    error: errorPay,\r\n  } = orderPay;\r\n\r\n  const addPayPalScript = async () => {\r\n    const { data: clientId } = await axios.get(\"/config/paypal\");\r\n    const script = document.createElement(\"script\");\r\n    script.type = \"text/javascript\";\r\n    script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`;\r\n    document.body.appendChild(script);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!orders || successPay) {\r\n      dispatch({ type: ORDER_PAY_RESET });\r\n      dispatch(getOrderDetails(orderId));\r\n    } else if (!orders.isPaid) {\r\n      if (!window.paypal) {\r\n        addPayPalScript();\r\n      }\r\n    }\r\n  }, [dispatch, orders, successPay, window, orderId]);\r\n\r\n  // const client = {\r\n  //   sandbox: \"YOUR-SANDBOX-APP-ID\",\r\n  //   production: \"YOUR-PRODUCTION-APP-ID\",\r\n  // };\r\n\r\n  const successPaymentHandler = (paymentResult) => {\r\n    console.log(paymentResult);\r\n    dispatch(payOrder(orderId, paymentResult));\r\n    alert(\"Transaction completed by \" + paymentResult.payer.name.given_name);\r\n  };\r\n\r\n  return loading ? (\r\n    <Loader />\r\n  ) : error ? (\r\n    <ErrMess varient=\"danger\">{error}</ErrMess>\r\n  ) : (\r\n    <>\r\n      <br />\r\n      <Typography variant=\"h4\" component=\"h2\" color=\"textSecondary\">\r\n        ORDER {orders._id}\r\n      </Typography>\r\n      <br />\r\n      <br />\r\n      <Grid container spacing={4}>\r\n        {/*/////////////////////   LEFT SIDE    ///////////////////////////////////*/}\r\n        <Grid item md={8} xs={12}>\r\n          <Paper className={classes.paper} elevation={6}>\r\n            <List className={classes.list}>\r\n              <ListItem className={classes.list_item}>\r\n                <Typography color=\"primary\" variant=\"h5\" component=\"h3\">\r\n                  <strong>SHIPPING DETAILS</strong>\r\n                </Typography>\r\n              </ListItem>\r\n              <Divider variant=\"fullWidth\" className={classes.divider} />\r\n\r\n              <ListItem className={classes.list_item}>\r\n                <Typography color=\"textPrimary\" varient=\"p\" component=\"h6\">\r\n                  <strong className={classes.shipping}>Name: </strong>\r\n                  {orders.user.name}\r\n                  <br />\r\n                  <br />\r\n                  <strong className={classes.shipping}>Email: </strong>\r\n                  <a\r\n                    className={classes.email}\r\n                    href={orders.user.email}\r\n                    target=\"_blank\"\r\n                  >\r\n                    {orders.user.email}\r\n                  </a>\r\n                  <br />\r\n                  <br />\r\n                  <strong>Address: </strong>\r\n                  <span className=\"ml-4\">{orders.shippingAddress.address}</span>\r\n                  <br />\r\n                  <span className=\"ml-5 pl-5\">\r\n                    {orders.shippingAddress.city}\r\n                  </span>\r\n\r\n                  <br />\r\n                  <span className=\"ml-5 pl-5\">\r\n                    {orders.shippingAddress.country},\r\n                  </span>\r\n\r\n                  <br />\r\n                  <span className=\"ml-5 pl-5\">\r\n                    {orders.shippingAddress.postalCode}\r\n                  </span>\r\n                </Typography>\r\n              </ListItem>\r\n              <div className={classes.message}>\r\n                {orders.isDelivered ? (\r\n                  <ErrMess varient=\"success\">\r\n                    Delivered at {orders.deliveredAt}\r\n                  </ErrMess>\r\n                ) : (\r\n                  <ErrMess varient=\"error\">Not Delivered</ErrMess>\r\n                )}\r\n              </div>\r\n            </List>\r\n\r\n            <List className={classes.list}>\r\n              <ListItem className={classes.list_item}>\r\n                <Typography color=\"primary\" variant=\"h5\" component=\"h3\">\r\n                  <strong>PAYMENT METHOD</strong>\r\n                </Typography>\r\n              </ListItem>\r\n              <Divider variant=\"fullWidth\" className={classes.divider} />\r\n\r\n              <ListItem className={classes.list_item}>\r\n                <Typography color=\"textPrimary\" varient=\"p\" component=\"h6\">\r\n                  {orders.paymentMethod}\r\n                </Typography>\r\n              </ListItem>\r\n              <div className={classes.message}>\r\n                {orders.isPaid ? (\r\n                  <ErrMess varient=\"success\">Paid on {orders.paidAt}</ErrMess>\r\n                ) : (\r\n                  <ErrMess varient=\"error\">Not Paid</ErrMess>\r\n                )}\r\n              </div>\r\n            </List>\r\n          </Paper>\r\n\r\n          <Paper className={classes.paper} elevation={6}>\r\n            <List className={classes.list}>\r\n              <ListItem className={classes.list_item}>\r\n                <Typography color=\"primary\" variant=\"h5\" component=\"h3\">\r\n                  <strong>ORDER DETAILS</strong>\r\n                </Typography>\r\n              </ListItem>\r\n            </List>\r\n\r\n            {!orders.orderItems.length ? (\r\n              <Container maxWidth=\"md\">\r\n                <ErrMess varient=\"info\">\r\n                  No order <Link to=\"/\">Keep Shopping</Link>\r\n                </ErrMess>\r\n              </Container>\r\n            ) : (\r\n              <List>\r\n                {orders.orderItems.map((item, index) => (\r\n                  <div key={index}>\r\n                    <ListItem\r\n                      className={classes.list_item}\r\n                      alignItems=\"flex-start\"\r\n                    >\r\n                      <ListItemAvatar>\r\n                        <Avatar\r\n                          className={classes.avatar}\r\n                          alt={item.name}\r\n                          variant=\"square\"\r\n                          src={item.image}\r\n                        />\r\n                      </ListItemAvatar>\r\n                      <Link\r\n                        className={classes.order_link}\r\n                        to={`/products/${item.category}/${item.product}`}\r\n                      >\r\n                        <ListItemText\r\n                          primary={item.name}\r\n                          secondary={\r\n                            <Typography\r\n                              color=\"primary\"\r\n                              variant=\"body2\"\r\n                              component=\"span\"\r\n                            >\r\n                              {item.qty} x {item.price} ={\" \"}\r\n                              {(item.qty * item.price).toFixed(2)}\r\n                            </Typography>\r\n                          }\r\n                        />\r\n                      </Link>\r\n                      <ListItemSecondaryAction className={classes.qty}>\r\n                        Qty: {item.qty}\r\n                      </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                    <Divider\r\n                      variant=\"fullWidth\"\r\n                      className={classes.divider}\r\n                      component=\"li\"\r\n                    />\r\n                  </div>\r\n                ))}\r\n              </List>\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/*/////////////////////   RIGHT SIDE    ///////////////////////////////////*/}\r\n        <Grid item md={4} xs={12}>\r\n          <Paper elevation={6}>\r\n            <List>\r\n              <ListItem>\r\n                <Typography\r\n                  className={classes.order_summary}\r\n                  color=\"primary\"\r\n                  variant=\"h4\"\r\n                  component=\"h3\"\r\n                >\r\n                  <strong>ORDER SUMMARY</strong>\r\n                </Typography>\r\n              </ListItem>\r\n\r\n              <Divider variant=\"inset\" component=\"br\" />\r\n\r\n              <ListItem>\r\n                <Grid container>\r\n                  <Grid item lg={6} xs={6}>\r\n                    <Typography color=\"primary\" varient=\"h6\" component=\"h6\">\r\n                      <strong>Items Price</strong>\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={6}>\r\n                    <Typography color=\"textPrimary\" varient=\"p\" component=\"h6\">\r\n                      ${orders.itemsPrice}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </ListItem>\r\n\r\n              <Divider\r\n                variant=\"fullWidth\"\r\n                className={classes.divider}\r\n                component=\"li\"\r\n              />\r\n\r\n              <ListItem>\r\n                <Grid container>\r\n                  <Grid item lg={6} xs={6}>\r\n                    <Typography color=\"primary\" varient=\"h6\" component=\"h6\">\r\n                      <strong>Delivery Charge</strong>\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={6}>\r\n                    <Typography color=\"textPrimary\" varient=\"p\" component=\"h6\">\r\n                      ${orders.shippingPrice}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </ListItem>\r\n\r\n              <Divider\r\n                variant=\"fullWidth\"\r\n                className={classes.divider}\r\n                component=\"li\"\r\n              />\r\n\r\n              <ListItem>\r\n                <Grid container>\r\n                  <Grid item lg={6} xs={6}>\r\n                    <Typography color=\"primary\" varient=\"h6\" component=\"h6\">\r\n                      <strong>Tax Price</strong>\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={6}>\r\n                    <Typography color=\"textPrimary\" varient=\"p\" component=\"h6\">\r\n                      ${orders.taxPrice}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </ListItem>\r\n\r\n              <Divider\r\n                variant=\"fullWidth\"\r\n                className={classes.divider}\r\n                component=\"li\"\r\n              />\r\n\r\n              <ListItem>\r\n                <Grid container>\r\n                  <Grid item lg={6} xs={6}>\r\n                    <Typography color=\"primary\" varient=\"h6\" component=\"h6\">\r\n                      <strong>Total Price</strong>\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item lg={6} xs={6}>\r\n                    <Typography color=\"textPrimary\" varient=\"p\" component=\"h6\">\r\n                      ${orders.totalPrice}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </ListItem>\r\n\r\n              <Divider variant=\"fullWidth\" component=\"br\" />\r\n              {!orders.isPaid && (\r\n                <ListItem>\r\n                  {loadingPay && <Loader />}\r\n\r\n                  <PayPalButton\r\n                    style={{\r\n                      maxWidth: \"100%\",\r\n                      margin: \"auto\",\r\n                    }}\r\n                    amount={`${orders.totalPrice}`}\r\n                    onSuccess={successPaymentHandler}\r\n                  />\r\n                </ListItem>\r\n              )}\r\n            </List>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default OrderScreen;\r\n","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\reducers\\cart.js",["223","224"],"import {\r\n  CART_ITEM_ADD,\r\n  CART_ITEM_REMOVE,\r\n  CART_SAVE_SHIPPING_ADDRESS,\r\n  CART_SAVE_PAYMENT_METHOD,\r\n} from \"../actionTypes/cartConstants\";\r\n\r\n///////////////////////    CART ADD & REMOVE TO/FROM CART  ///////////////////\r\nexport const cartReducer = (\r\n  state = { cartItems: [], shippingAddress: {}, paymentMethod: \"\" },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case CART_ITEM_ADD:\r\n      const { payload } = action;\r\n      // check if cartItems exist or not\r\n      const existItem = state.cartItems.find(\r\n        (p) => p.product == payload.product\r\n      );\r\n      if (existItem) {\r\n        return {\r\n          ...state,\r\n          cartItems: state.cartItems.map((p) =>\r\n            p.product == existItem.product ? payload : p\r\n          ),\r\n        };\r\n      } else {\r\n        return { ...state, cartItems: [...state.cartItems, payload] };\r\n      }\r\n\r\n    case CART_ITEM_REMOVE:\r\n      return {\r\n        ...state,\r\n        cartItems: state.cartItems.filter((p) => p.product !== action.payload),\r\n      };\r\n\r\n    case CART_SAVE_SHIPPING_ADDRESS:\r\n      return {\r\n        ...state,\r\n        shippingAddress: action.payload,\r\n      };\r\n\r\n    case CART_SAVE_PAYMENT_METHOD:\r\n      return {\r\n        ...state,\r\n        paymentMethod: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\reducers\\productLists.js",[],"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\reducers\\productDetails.js",[],"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\reducers\\user.js",["225"],"import {\r\n  USER_LOGIN_FAILED,\r\n  USER_LOGIN_REQUEST,\r\n  USER_LOGIN_SUCCESS,\r\n  USER_LOGOUT,\r\n  USER_REGISTER_FAILED,\r\n  USER_REGISTER_REQUEST,\r\n  USER_REGISTER_SUCCESS,\r\n  USER_DETAILS_FAILED,\r\n  USER_DETAILS_REQUEST,\r\n  USER_DETAILS_SUCCESS,\r\n  USER_UPDATE_PROFILE_REQUEST,\r\n  USER_UPDATE_PROFILE_SUCCESS,\r\n  USER_UPDATE_PROFILE_FAILED,\r\n  USER_UPDATE_PROFILE_RESET,\r\n  USER_DETAILS_RESET,\r\n} from \"../actionTypes/userConstants\";\r\n\r\n///////////////////////////     LOGIN REDUCER    ///////////////////////////////\r\n\r\nexport const userLoginReducer = (\r\n  state = {\r\n    loading: false,\r\n    isAuthenticated: false,\r\n    userInfo: null,\r\n    error: null,\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case USER_LOGIN_REQUEST:\r\n      return { loading: true, error: null };\r\n    case USER_LOGIN_SUCCESS:\r\n      return {\r\n        loading: false,\r\n        isAuthenticated: true,\r\n        userInfo: action.payload,\r\n      };\r\n\r\n    case USER_LOGIN_FAILED:\r\n      return {\r\n        loading: false,\r\n        isAuthenticated: false,\r\n        error: action.payload,\r\n      };\r\n\r\n    case USER_LOGOUT:\r\n      return {\r\n        isAuthenticated: false,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n///////////////////////////     REGISTER REDUCER    ///////////////////////////////\r\n\r\nexport const userRegisterReducer = (\r\n  state = {\r\n    loading: false,\r\n    isAuthenticated: false,\r\n    userInfo: null,\r\n    error: null,\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case USER_REGISTER_REQUEST:\r\n      return { loading: true, error: null };\r\n    case USER_REGISTER_SUCCESS:\r\n      return {\r\n        loading: false,\r\n        isAuthenticated: true,\r\n        userInfo: action.payload,\r\n      };\r\n\r\n    case USER_REGISTER_FAILED:\r\n      return {\r\n        loading: false,\r\n        isAuthenticated: false,\r\n        error: action.payload,\r\n      };\r\n    case USER_LOGOUT:\r\n      return {\r\n        isAuthenticated: false,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n/////////////////////////////////////////   USER PROFILE DETAILS   /////////////////////////////////\r\n\r\nexport const userDetailsReducer = (\r\n  state = { loading: false, user: null, error: null },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case USER_DETAILS_REQUEST:\r\n      return { loading: true };\r\n    case USER_DETAILS_SUCCESS:\r\n      return {\r\n        loading: false,\r\n        user: action.payload,\r\n      };\r\n\r\n    case USER_DETAILS_FAILED:\r\n      return {\r\n        loading: false,\r\n        error: action.payload,\r\n      };\r\n\r\n    case USER_DETAILS_RESET:\r\n      return {\r\n        user: null,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n/////////////////////////////////////////   UPDATE USER PROFILE DETAILS   /////////////////////////////////\r\n\r\nexport const userUpdateProfileReducer = (\r\n  state = { loading: false, userInfo: null, error: null, success: false },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case USER_UPDATE_PROFILE_REQUEST:\r\n      return { loading: true };\r\n    case USER_UPDATE_PROFILE_SUCCESS:\r\n      return {\r\n        loading: false,\r\n        userInfo: action.payload,\r\n        success: true,\r\n      };\r\n\r\n    case USER_UPDATE_PROFILE_FAILED:\r\n      return {\r\n        loading: false,\r\n        error: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\reducers\\order.js",[],"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\components\\ErrMessage.js",[],"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\components\\Loader.js",[],"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\components\\Products.js",["226"],"import React from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport Rating from \"./Rating\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"../styles/components/Products.css\";\r\n\r\nexport default function Products({ product, path }) {\r\n  return (\r\n    <>\r\n      <Card className=\"card my-3  rounded\">\r\n        <Link to={`products/${product.category}/${product._id}`}>\r\n          {/* <Card.Img className=\"card_image \" src={product.image} /> */}\r\n          <div className=\"card_image_div\">\r\n            <img className=\"card_image\" src={product.image} />\r\n          </div>\r\n        </Link>\r\n        <Card.Body>\r\n          <Link to={`products/${product.category}/${product._id}`}>\r\n            <Card.Title\r\n              as=\"div\"\r\n              style={{ fontSize: \"16px\", textDecoration: \"none\" }}\r\n            >\r\n              <strong>{product.name}</strong>\r\n            </Card.Title>\r\n          </Link>\r\n\r\n          <Card.Text as=\"div\">\r\n            <div className=\"my-3\">\r\n              <Rating\r\n                value={product.rating}\r\n                text={`${product.numReviews} rating`}\r\n              />\r\n\r\n              {/* {product.rating} from {product.numReviews} rating */}\r\n            </div>\r\n          </Card.Text>\r\n\r\n          <Card.Text as=\"h3\">${product.price}</Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\components\\CheckoutStepper.js",[],"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\components\\CustomStyles\\header.js",[],"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\actions\\productListAction.js",[],"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\actions\\userAction.js",[],"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\actions\\cartAction.js",[],"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\actions\\orderAction.js",["227"],"import {\r\n  CREATE_ORDER_REQUEST,\r\n  CREATE_ORDER_SUCCESS,\r\n  CREATE_ORDER_FAILED,\r\n  ORDER_DETAILS_REQUEST,\r\n  ORDER_DETAILS_SUCCESS,\r\n  ORDER_DETAILS_FAILED,\r\n  ORDER_DETAILS_RESET,\r\n  ORDER_PAY_REQUEST,\r\n  ORDER_PAY_SUCCESS,\r\n  ORDER_PAY_FAILED,\r\n  LIST_MY_ORDER_REQUEST,\r\n  LIST_MY_ORDER_SUCCESS,\r\n  LIST_MY_ORDER_FAILED,\r\n} from \"../actionTypes/orderConstants\";\r\n\r\nimport axios from \"axios\";\r\n//////////////////////////////    ACTIONS    ///////////////////////////////\r\n\r\n/////////////   ORDER CREATE    ///////////////\r\nconst reqOrder = () => ({\r\n  type: CREATE_ORDER_REQUEST,\r\n});\r\n\r\nconst addOrder = (order) => ({\r\n  type: CREATE_ORDER_SUCCESS,\r\n  payload: order,\r\n});\r\n\r\nconst orderFailed = (error) => ({\r\n  type: CREATE_ORDER_FAILED,\r\n  payload: error,\r\n});\r\n\r\n/////////////   Order Details   ///////////////\r\nconst reqOrderDetails = () => ({\r\n  type: ORDER_DETAILS_REQUEST,\r\n});\r\n\r\nconst addOrderDetails = (order) => ({\r\n  type: ORDER_DETAILS_SUCCESS,\r\n  payload: order,\r\n});\r\n\r\nconst orderDetailsFailed = (error) => ({\r\n  type: ORDER_DETAILS_FAILED,\r\n  payload: error,\r\n});\r\n\r\n/////////////   PAY Order   ///////////////\r\nconst reqPayOrder = () => ({\r\n  type: ORDER_PAY_REQUEST,\r\n});\r\n\r\nconst addPayOrder = (order) => ({\r\n  type: ORDER_PAY_SUCCESS,\r\n  payload: order,\r\n});\r\n\r\nconst payOrderFailed = (error) => ({\r\n  type: ORDER_PAY_FAILED,\r\n  payload: error,\r\n});\r\n\r\n/////////////   MY ORDERS   ///////////////\r\nconst reqMyOrders = () => ({\r\n  type: LIST_MY_ORDER_REQUEST,\r\n});\r\n\r\nconst addMyOrders = (order) => ({\r\n  type: LIST_MY_ORDER_SUCCESS,\r\n  payload: order,\r\n});\r\n\r\nconst myOrdersFailed = (error) => ({\r\n  type: LIST_MY_ORDER_FAILED,\r\n  payload: error,\r\n});\r\n\r\n/////////////////////////////    ACTION CREATOR    ///////////////////////////\r\n\r\n//////////////    ORDER CREATE    ///////////////\r\nexport const createOrder = (order) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch(reqOrder());\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      \"Content-Type\": \"application/json\",\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n    const { data } = await axios.post(\"/orders\", order, config);\r\n\r\n    dispatch(addOrder(data));\r\n  } catch (error) {\r\n    orderFailed(\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message\r\n    );\r\n  }\r\n};\r\n\r\n//////////////    ORDER DETAILS    ///////////////\r\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch(reqOrderDetails());\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    console.log(userInfo);\r\n    const { data } = await axios.get(`/orders/${id}`, config);\r\n    console.log(data);\r\n\r\n    dispatch(addOrderDetails(data));\r\n  } catch (error) {\r\n    orderDetailsFailed(\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message\r\n    );\r\n  }\r\n};\r\n\r\n//////////////    PAY ORDER AND UPDATE ORDER TO PAID    ///////////////\r\nexport const payOrder = (orderId, paymentResult) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  try {\r\n    dispatch(reqPayOrder());\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      \"Content-Type\": \"application/json\",\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n    const { data } = await axios.put(\r\n      `/orders/${orderId}/payment`,\r\n      paymentResult,\r\n      config\r\n    );\r\n    console.log(data);\r\n\r\n    dispatch(addPayOrder(data));\r\n  } catch (error) {\r\n    payOrderFailed(\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message\r\n    );\r\n  }\r\n};\r\n\r\n//////////////    LIST MY ORDERS (PARTICULAR USER)    ///////////////\r\nexport const listMyOrders = () => async (dispatch, getState) => {\r\n  try {\r\n    dispatch(reqMyOrders());\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.get(\"/orders/myorders\", config);\r\n    console.log(data);\r\n\r\n    dispatch(addMyOrders(data));\r\n  } catch (error) {\r\n    myOrdersFailed(\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message\r\n    );\r\n  }\r\n};\r\n","D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\screen\\customStyle\\PlaceOrderScreen.js",[],"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\screen\\customStyle\\ProfileScreen.js",[],"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\actionTypes\\orderConstants.js",[],"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\actionTypes\\userConstants.js",[],"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\actionTypes\\productListConstants.js",[],"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\actionTypes\\productDetailsConstants.js",[],"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\actionTypes\\cartConstants.js",[],"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\components\\Rating.js",[],"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\components\\CustomStyles\\CheckoutStepper\\StepIcon.js",[],"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\components\\CustomStyles\\CheckoutStepper\\StepConnector.js",[],"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\screen\\customStyle\\allFormsScreen.js",[],"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\redux\\actions\\productDetailsAction.js",[],"D:\\PROJECTS\\1. Web Dev\\eCommerce\\frontend\\src\\utils\\carousalData.js",[],{"ruleId":"228","replacedBy":"229"},{"ruleId":"230","replacedBy":"231"},{"ruleId":"232","severity":1,"message":"233","line":1,"column":17,"nodeType":"234","messageId":"235","endLine":1,"endColumn":25},{"ruleId":"232","severity":1,"message":"236","line":23,"column":10,"nodeType":"234","messageId":"235","endLine":23,"endColumn":14},{"ruleId":"237","severity":1,"message":"238","line":128,"column":45,"nodeType":"239","messageId":"240","endLine":128,"endColumn":47},{"ruleId":"237","severity":1,"message":"238","line":157,"column":45,"nodeType":"239","messageId":"240","endLine":157,"endColumn":47},{"ruleId":"237","severity":1,"message":"238","line":186,"column":45,"nodeType":"239","messageId":"240","endLine":186,"endColumn":47},{"ruleId":"237","severity":1,"message":"238","line":215,"column":45,"nodeType":"239","messageId":"240","endLine":215,"endColumn":47},{"ruleId":"232","severity":1,"message":"241","line":1,"column":17,"nodeType":"234","messageId":"235","endLine":1,"endColumn":26},{"ruleId":"232","severity":1,"message":"236","line":2,"column":10,"nodeType":"234","messageId":"235","endLine":2,"endColumn":14},{"ruleId":"242","severity":1,"message":"243","line":37,"column":6,"nodeType":"244","endLine":37,"endColumn":16,"suggestions":"245"},{"ruleId":"237","severity":1,"message":"238","line":159,"column":44,"nodeType":"239","messageId":"240","endLine":159,"endColumn":46},{"ruleId":"237","severity":1,"message":"238","line":165,"column":52,"nodeType":"239","messageId":"240","endLine":165,"endColumn":54},{"ruleId":"232","severity":1,"message":"246","line":10,"column":8,"nodeType":"234","messageId":"235","endLine":10,"endColumn":17},{"ruleId":"237","severity":1,"message":"238","line":62,"column":17,"nodeType":"239","messageId":"240","endLine":62,"endColumn":19},{"ruleId":"232","severity":1,"message":"246","line":10,"column":8,"nodeType":"234","messageId":"235","endLine":10,"endColumn":17},{"ruleId":"232","severity":1,"message":"247","line":48,"column":37,"nodeType":"234","messageId":"235","endLine":48,"endColumn":52},{"ruleId":"237","severity":1,"message":"238","line":62,"column":18,"nodeType":"239","messageId":"240","endLine":62,"endColumn":20},{"ruleId":"232","severity":1,"message":"248","line":10,"column":8,"nodeType":"234","messageId":"235","endLine":10,"endColumn":17},{"ruleId":"232","severity":1,"message":"249","line":13,"column":8,"nodeType":"234","messageId":"235","endLine":13,"endColumn":14},{"ruleId":"232","severity":1,"message":"250","line":14,"column":8,"nodeType":"234","messageId":"235","endLine":14,"endColumn":14},{"ruleId":"242","severity":1,"message":"251","line":39,"column":6,"nodeType":"244","endLine":39,"endColumn":32,"suggestions":"252"},{"ruleId":"237","severity":1,"message":"238","line":93,"column":29,"nodeType":"239","messageId":"240","endLine":93,"endColumn":31},{"ruleId":"237","severity":1,"message":"238","line":186,"column":46,"nodeType":"239","messageId":"240","endLine":186,"endColumn":48},{"ruleId":"232","severity":1,"message":"253","line":61,"column":27,"nodeType":"234","messageId":"235","endLine":61,"endColumn":32},{"ruleId":"242","severity":1,"message":"254","line":83,"column":6,"nodeType":"244","endLine":83,"endColumn":24,"suggestions":"255"},{"ruleId":"237","severity":1,"message":"238","line":299,"column":46,"nodeType":"239","messageId":"240","endLine":299,"endColumn":48},{"ruleId":"242","severity":1,"message":"256","line":72,"column":6,"nodeType":"244","endLine":72,"endColumn":32,"suggestions":"257"},{"ruleId":"258","severity":1,"message":"259","line":154,"column":15,"nodeType":"260","endLine":154,"endColumn":30},{"ruleId":"232","severity":1,"message":"261","line":29,"column":10,"nodeType":"234","messageId":"235","endLine":29,"endColumn":16},{"ruleId":"232","severity":1,"message":"262","line":37,"column":10,"nodeType":"234","messageId":"235","endLine":37,"endColumn":18},{"ruleId":"232","severity":1,"message":"263","line":37,"column":20,"nodeType":"234","messageId":"235","endLine":37,"endColumn":31},{"ruleId":"232","severity":1,"message":"264","line":52,"column":12,"nodeType":"234","messageId":"235","endLine":52,"endColumn":20},{"ruleId":"242","severity":1,"message":"265","line":72,"column":6,"nodeType":"244","endLine":72,"endColumn":53,"suggestions":"266"},{"ruleId":"267","severity":1,"message":"268","line":116,"column":19,"nodeType":"269","endLine":120,"endColumn":20},{"ruleId":"237","severity":1,"message":"238","line":18,"column":26,"nodeType":"239","messageId":"240","endLine":18,"endColumn":28},{"ruleId":"237","severity":1,"message":"238","line":24,"column":23,"nodeType":"239","messageId":"240","endLine":24,"endColumn":25},{"ruleId":"232","severity":1,"message":"270","line":15,"column":3,"nodeType":"234","messageId":"235","endLine":15,"endColumn":28},{"ruleId":"271","severity":1,"message":"272","line":15,"column":13,"nodeType":"269","endLine":15,"endColumn":63},{"ruleId":"232","severity":1,"message":"273","line":8,"column":3,"nodeType":"234","messageId":"235","endLine":8,"endColumn":22},"no-native-reassign",["274"],"no-negated-in-lhs",["275"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'match.params.category' and 'match.params.id'. Either include them or remove the dependency array.","ArrayExpression",["276"],"'TextField' is defined but never used.","'isAuthenticated' is assigned a value but never used.","'FormLabel' is defined but never used.","'Rating' is defined but never used.","'Loader' is defined but never used.","React Hook useEffect has a missing dependency: 'category'. Either include it or remove the dependency array.",["277"],"'error' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'order._id'. Either include it or remove the dependency array.",["278"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["279"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Button' is defined but never used.","'sdkReady' is assigned a value but never used.","'setSdkReady' is assigned a value but never used.","'errorPay' is assigned a value but never used.","React Hook useEffect has an unnecessary dependency: 'window'. Either exclude it or remove the dependency array. Outer scope values like 'window' aren't valid dependencies because mutating them doesn't re-render the component.",["280"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'USER_UPDATE_PROFILE_RESET' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'ORDER_DETAILS_RESET' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"281","fix":"282"},{"desc":"283","fix":"284"},{"desc":"285","fix":"286"},{"desc":"287","fix":"288"},{"desc":"289","fix":"290"},"Update the dependencies array to be: [dispatch, match.params.category, match.params.id]",{"range":"291","text":"292"},"Update the dependencies array to be: [category, dispatch, productId, qty]",{"range":"293","text":"294"},"Update the dependencies array to be: [history, order._id, success]",{"range":"295","text":"296"},"Update the dependencies array to be: [dispatch, userInfo, user, history]",{"range":"297","text":"298"},"Update the dependencies array to be: [dispatch, orders, successPay, orderId]",{"range":"299","text":"300"},[1196,1206],"[dispatch, match.params.category, match.params.id]",[1157,1183],"[category, dispatch, productId, qty]",[3012,3030],"[history, order._id, success]",[2678,2704],"[dispatch, userInfo, user, history]",[2579,2626],"[dispatch, orders, successPay, orderId]"]